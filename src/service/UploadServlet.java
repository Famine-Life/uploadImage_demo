package service;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;
 
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import entity.Items;
import uploadImages_jdbc.uploadImages_test;
 

/**
 * Servlet implementation class UploadServlet
 */
@WebServlet("/UploadServlet")
public class UploadServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
     
    // 上传文件存储目录
    private static final String UPLOAD_DIRECTORY = "upload";
 
    // 上传配置
    private static final int MEMORY_THRESHOLD   = 1024 * 1024 * 3;  // 3MB
    private static final int MAX_FILE_SIZE      = 1024 * 1024 * 40; // 40MB
    private static final int MAX_REQUEST_SIZE   = 1024 * 1024 * 50; // 50MB
    private static String ImagePath;
    /**
     * 上传数据及保存文件
     */
    
    protected void doPost(HttpServletRequest request,
        HttpServletResponse response) throws ServletException, IOException {
        // 检测是否为多媒体上传
        if (!ServletFileUpload.isMultipartContent(request)) {
            // 如果不是则停止
            PrintWriter writer = response.getWriter();
            writer.println("Error: 表单必须包含 enctype=multipart/form-data");
            writer.flush();
            return;
        }

        DataOutputStream dos = null;
        FileInputStream fis=null;
        Socket socket=null;
        
        // 配置上传参数
        DiskFileItemFactory factory = new DiskFileItemFactory();
        // 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中
        factory.setSizeThreshold(MEMORY_THRESHOLD);
        // 设置临时存储目录
        factory.setRepository(new File(System.getProperty("java.io.tmpdir")));
 
        ServletFileUpload upload = new ServletFileUpload(factory);
         
        // 设置最大文件上传值
        upload.setFileSizeMax(MAX_FILE_SIZE);
         
        // 设置最大请求值 (包含文件和表单数据)
        upload.setSizeMax(MAX_REQUEST_SIZE);
        
        // 中文处理
        upload.setHeaderEncoding("UTF-8"); 

        // 构造临时路径来存储上传的文件
        // 这个路径相对当前应用的目录
        String uploadPath = getServletContext().getRealPath("./") + File.separator + UPLOAD_DIRECTORY;
         
        // 如果目录不存在则创建
        File uploadDir = new File(uploadPath);
        if (!uploadDir.exists()) {
            uploadDir.mkdir();
        }
 
        try {
            // 解析请求的内容提取文件数据
            @SuppressWarnings("unchecked")
            List<FileItem> formItems = upload.parseRequest(request);
 
            if (formItems != null && formItems.size() > 0) {
                // 迭代表单数据
                for (FileItem item : formItems) {
                    // 处理不在表单中的字段
                    if (!item.isFormField()) {
                        String fileName = new File(item.getName()).getName();
                        String filePath = uploadPath + File.separator + fileName;
                       //System.out.println(uploadPath+File.separator+fileName);
                        UploadServlet.ImagePath=UPLOAD_DIRECTORY +"\\"+fileName;
                        item.setFieldName(fileName);
                        File storeFile = new File(filePath);

                        //创建客户端Socket，指定服务器地址和端口
            			socket=new Socket("localhost",8888);
            			OutputStream os=socket.getOutputStream();//字节输出 流
//            			dos=new DataOutputStream(socket.getOutputStream());
//            			byte[] sendBytes=new byte[1024];
//            			while((length=fis.read(sendBytes,0,sendBytes.length))>0)
//            			{
//            				dos.write(sendBytes,0,length);
//            				dos.flush();
//            				
//            			}
            			PrintWriter pw=new PrintWriter(os);//将输出流包装为打印流
            			//pw.write("用户名：admin2;密码：456"); //测试
            			//pw.write(filePath);
            			pw.write(UploadServlet.ImagePath);
            			pw.flush();

            			socket.shutdownOutput(); //关闭输出流
                        
                        // 在控制台输出文件的上传路径
                        System.out.println(filePath);
                     // 保存文件到硬盘
                        item.write(storeFile);
                        String FP=storeFile.getPath();
                        fis=new FileInputStream(FP);
                        
                        request.setAttribute("message",
                            "文件上传成功!");
                    }
                }
            }
        } catch (Exception ex) {
            request.setAttribute("message",
                    "错误信息: " + ex.getMessage());
        }
        finally{
        	if(dos!=null){dos.close();}
        	if(fis!=null){fis.close();}
        	if(socket!=null){socket.close();}
        }
        // 跳转到 message.jsp
        getServletContext().getRequestDispatcher("/message.jsp").forward(request, response);
    }
    
    public String getImagesPath()
    {
    	String str=ImagePath;
    	return str;
    }
    
    
    
}